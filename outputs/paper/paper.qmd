---
title: "My title"
subtitle: "My subtitle if needed"
author: 
  - Robert Ford
thanks: "Code and data are available at: https://github.com/Ford-Robert/STA304_City-Of-Toronto-Data.git"
date: today
date-format: long??
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(lubridate)
library(opendatatoronto)
library(tidyverse)
library(tidyr)
library(dplyr)
library(knitr)
library(ggplot2)
library(scales)
library(gridExtra)
library(patchwork)
```

```{r}
#| message: false
#| echo: false
#| warning: false
data <- read_csv(here::here("outputs/data/cleaned_dataset.csv"))

```

# Introduction{#sec-introduction}



# Data {#sec-data}

```{r num-incidents-by-mode}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: (left) Total Number of Incidents (right) Total Amount of Delay Time
#| fig-align: center

plot1 <- ggplot(data, aes(x = vehicle)) +
  geom_bar(fill = "steelblue") +
  scale_y_continuous(labels = comma) +
  labs(title = "Number of Incidents by Vehicle Type", x = "Vehicle Type", y = "Number of Incidents") +
  theme_minimal()

cumulative_delay <- data %>%
  group_by(vehicle) %>%
  summarise(total_delay = sum(Delay, na.rm = TRUE))


plot2 <- ggplot(cumulative_delay, aes(x = vehicle, y = total_delay)) +
  geom_bar(stat = "identity", fill = "tomato") +
  scale_y_continuous(labels = comma) +
  labs(title = "Cumulative Delay Time by Vehicle", x = "Vehicle Type", y = "Total Delay (Minutes)") +
  theme_minimal()

grid.arrange(plot1, plot2, ncol = 2)

```

```{r ave-delay-by-mode}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Average Amount of Delay Time by Vehicle Type
#| fig-align: center

average_delay <- data %>%
  group_by(vehicle) %>%
  summarise(avg_delay = mean(Delay, na.rm = TRUE))

ggplot(average_delay, aes(x = vehicle, y = avg_delay)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Average Delay Time by Vehicle Type", x = "Vehicle Type", y = "Average Delay (Minutes)") +
  theme_minimal()

```


```{r}
# Step 1: Calculate total delay time for each incident type
data_incident_total_delay <- data %>%
  group_by(Incident) %>%
  summarise(total_delay = sum(Delay, na.rm = TRUE), .groups = 'drop') %>%
  mutate(Incident = fct_reorder(Incident, total_delay, .desc = TRUE))  # Reorder by total_delay

# Step 2: Create the bar chart for total delay time by incident type
ggplot(data_incident_total_delay, aes(x = Incident, y = total_delay)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Total Delay Time by Incident Type", 
       x = "Incident Type", y = "Total Delay Time (Minutes)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))

```


```{r ave-delay-by-incident}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Average Amount of Delay Time by Incident Type
#| fig-align: center

data_incident_avg_delay <- data %>%
  group_by(Incident) %>%
  summarise(avg_delay = mean(Delay, na.rm = TRUE), .groups = 'drop') %>%
  mutate(Incident = fct_reorder(Incident, avg_delay, .desc = TRUE))  # Reorder by avg_delay

# Create the bar chart
ggplot(data_incident_avg_delay, aes(x = Incident, y = avg_delay)) +
  geom_bar(stat = "identity", fill = "steelblue") +  # Set a single color for all bars
  labs(title = "Average Delay Time by Incident Type", 
       x = "Incident Type", y = "Average Delay (Minutes)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))


data_incident_by_delay <- data %>%
  group_by(Incident, vehicle) %>%
  summarise(incident_count = n(), avg_delay = mean(Delay, na.rm = TRUE), .groups = 'drop') %>%
  group_by(Incident) %>%
  mutate(percentage = (incident_count / sum(incident_count)) * 100) %>%
  mutate(Incident = fct_reorder(Incident, avg_delay, .desc = TRUE))

```


```{r ave-delay-bus}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Average Amount of Delay Time for Buses by, Incident Type
#| fig-align: center


# Prepare the data: calculate the average delay time for each incident type and vehicle
data_incident_avg_delay <- data %>%
  group_by(vehicle, Incident) %>%
  summarise(avg_delay = mean(Delay, na.rm = TRUE), .groups = 'drop')

# Function to create a bar chart for a specific vehicle
create_bar_chart <- function(vehicle_type) {
  # Filter data for the specific vehicle type and reorder incidents by average delay
  vehicle_data <- data_incident_avg_delay %>%
    filter(vehicle == vehicle_type) %>%
    mutate(Incident = fct_reorder(Incident, avg_delay, .desc = TRUE))  # Reorder by avg_delay
  
  # Create the bar chart with uniform color and spread the x-axis labels
  ggplot(vehicle_data, aes(x = Incident, y = avg_delay)) +
    geom_bar(stat = "identity", fill = "steelblue") +  # Set a single color for all bars
    labs(title = paste("Average Delay by Incident Type for", vehicle_type),
         x = "Incident Type", y = "Average Delay (Minutes)") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))  # Rotate labels for readability
}

# Generate the separate bar charts for each vehicle type
bus_bar_chart <- create_bar_chart("Bus")
bus_bar_chart

```


```{r ave-delay-streetcar}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Average Amount of Delay Time for Streetcars, by Incident Type
#| fig-align: center
streetcar_bar_chart <- create_bar_chart("Streetcar")
streetcar_bar_chart
```

```{r}
# Calculate total delay by vehicle and incident
data_incident_delay <- data %>%
  group_by(vehicle, Incident) %>%
  summarise(total_delay = sum(Delay, na.rm = TRUE)) %>%
  ungroup()

# Calculate proportions for each incident by vehicle
data_incident_delay <- data_incident_delay %>%
  group_by(vehicle) %>%
  mutate(total_vehicle_delay = sum(total_delay),
         proportion = total_delay / total_vehicle_delay * 100) %>%
  ungroup()

# Keep top 5 incidents per vehicle and group the rest as "Other"
data_top5_incidents <- data_incident_delay %>%
  group_by(vehicle) %>%
  arrange(vehicle, desc(proportion)) %>%
  mutate(rank = row_number()) %>%
  mutate(Incident = ifelse(rank > 5, "Other", Incident)) %>%
  group_by(vehicle, Incident) %>%
  summarise(total_delay = sum(total_delay),
            proportion = sum(proportion)) %>%
  ungroup()

incident_colors <- c(
  "Cleaning" = "#1f77b4",
  "Collision" = "#ff7f0e",
  "Diversion" = "#2ca02c",
  "Emergency Services" = "#d62728",
  "General Delay" = "#9467bd",
  "Held By" = "#8c564b",
  "Investigation" = "#d62728",
  "Late Entering Service" = "#7f7f7f",
  "Late Leaving Garage" = "#bcbd22",
  "Management" = "#17becf",
  "Mechanical" = "#1f77b4",
  "Operations" = "#ff7f0e",
  "Overhead" = "#2ca02c",
  "Rail/Switches" = "#2ca02c",
  "Security" = "#d62728",
  "Vision" = "#8c564b",
  "Other" = "#7f7f7f",
  "N/A" = "#7f7f7f"
)

# Function to create a pie chart for a given vehicle
create_pie_chart <- function(data, vehicle_type) {
  data_vehicle <- data %>% filter(vehicle == vehicle_type)
  
  ggplot(data_vehicle, aes(x = "", y = proportion, fill = Incident)) +
    geom_bar(width = 1, stat = "identity", color = "white") +
    coord_polar("y") +
    labs(title = vehicle_type) +
    theme_void() +  # Removes background and axis
    theme(legend.position = "none",  # Removes the legend
          plot.title = element_text(hjust = 0.5)) + 
    geom_text(aes(label = paste0(Incident, ": ", round(proportion, 1), "%")), 
              position = position_stack(vjust = 0.5), size = 3) +
    scale_fill_manual(values = incident_colors)  # Apply the consistent color palette
}

# Create pie charts for each vehicle type
bus_pie <- create_pie_chart(data_top5_incidents, "Bus")
streetcar_pie <- create_pie_chart(data_top5_incidents, "Streetcar")
subway_pie <- create_pie_chart(data_top5_incidents, "Subway")

# Arrange the pie charts side by side
(bus_pie | streetcar_pie | subway_pie) + 
  plot_annotation(title = "Proportion of Total Delay Time by Incident (Top 5 + Other)")

```



```{r ave-delay-subway}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Average Amount of Delay Time for Subways, by Incident Type
#| fig-align: center

subway_bar_chart <- create_bar_chart("Subway")
subway_bar_chart

```

```{r ave-delay-days}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Average Amount of Delay Time by Day
#| fig-align: center
# Step 1: Extract the day of the week from the Date column and calculate average delay time by day of the week
data_avg_delay_by_day <- data %>%
  mutate(day_of_week = wday(Date, label = TRUE, abbr = FALSE)) %>%  # Extract day of the week from Date
  group_by(day_of_week) %>%
  summarise(avg_delay = mean(Delay, na.rm = TRUE), .groups = 'drop')

# Step 2: Create the bar chart for average delay by day of the week
ggplot(data_avg_delay_by_day, aes(x = day_of_week, y = avg_delay)) +
  geom_bar(stat = "identity", fill = "steelblue") +  # Vertical bars for average delay
  labs(title = "Average Delay Time by Day of the Week", 
       x = "Day of the Week", y = "Average Delay Time (Minutes)") +
  theme_minimal()

```


```{r ave-delay-months}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Average Amount of Delay Time by Month
#| fig-align: center

# Step 1: Extract the month from the Date column and calculate average delay time by month
data_avg_delay_by_month <- data %>%
  mutate(month = month(Date, label = TRUE, abbr = FALSE)) %>%  # Extract month from Date and get full month names
  group_by(month) %>%
  summarise(avg_delay = mean(Delay, na.rm = TRUE), .groups = 'drop')

# Step 2: Reorder the months to display them in chronological order
data_avg_delay_by_month <- data_avg_delay_by_month %>%
  mutate(month = factor(month, levels = month.name))  # Ensure months are ordered chronologically

# Step 3: Create the bar chart with switched axes
ggplot(data_avg_delay_by_month, aes(x = month, y = avg_delay)) +
  geom_bar(stat = "identity", fill = "steelblue") +  # Vertical bars with average delay
  labs(title = "Average Delay Time by Month", 
       x = "Month", y = "Average Delay Time (Minutes)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))  # Rotate x-axis labels for readability
```

```{r incidents-over-time}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Number of Incidents Over Time
#| fig-align: center


data_inc_num <- data %>%
  group_by(month = floor_date(Date, "month"), vehicle) %>%
  summarise(incident_count = n())

# Create the line graph
ggplot(data_inc_num, aes(x = month, y = incident_count, color = vehicle, group = vehicle)) +
  geom_line(size = 1) +
  labs(title = "Number of Incidents Over Time by Vehicle", x = "Time", y = "Number of Incidents", color = "Vehicle Type") +
  theme_minimal()

```

```{r delay-over-time}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Delay Time from 2014 to 2024
#| fig-align: center

data_monthly_delay <- data %>%
  group_by(month = floor_date(Date, "month"), vehicle) %>%
  summarise(average_delay = mean(Delay, na.rm = TRUE), .groups = 'drop')

# Create the line graph for monthly average delay times
ggplot(data_monthly_delay, aes(x = month, y = average_delay, color = vehicle, group = vehicle)) +
  geom_line(size = 1) +
  labs(title = "Average Delay Time Over Time by Vehicle (Monthly)", 
       x = "Time (Month)", y = "Average Delay Time (Minutes)", color = "Vehicle Type") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



```



# Discussion {#sec-discussion}

## First discussion point {#sec-first-point}



## Second discussion point


## Third discussion point


## Weaknesses and next steps



\newpage


# References


